label = "Number of observations",
min = 10, max = 100, value = 30
),
prettyToggle(
inputId = "na",
label_on = "NAs keeped",
label_off = "NAs removed",
icon_on = icon("check"),
icon_off = icon("remove")
)
),
dropdownBlock(
id = "mydropdown2",
title = "Dropdown 2",
icon = icon("sliders"),
prettySwitch(
inputId = "switch4",
label = "Fill switch with status:",
fill = TRUE,
status = "primary"
),
prettyCheckboxGroup(
inputId = "checkgroup2",
label = "Click me!",
thick = TRUE,
choices = c("Click me !", "Me !", "Or me !"),
animation = "pulse",
status = "info"
)
)
),
dropdownMenu(
type = "tasks",
badgeStatus = "danger",
taskItem(value = 20, color = "aqua", "Refactor code"),
taskItem(value = 40, color = "green", "Design new layout"),
taskItem(value = 60, color = "yellow", "Another task"),
taskItem(value = 80, color = "red", "Write documentation")
)
),
sidebar = dashboardSidebar(),
body = dashboardBody(
setShadow(class = "dropdown-menu")
),
rightsidebar = rightSidebar(),
title = "DashboardPage"
),
server = function(input, output) { }
)
install.packages("semantic.dashboard")
?rightSidebar
library(semantic.dashboard) # <-- You only need to change this line to: library(semantic.dashboard)
#########################
ui <- dashboardPage(
dashboardHeader(title = "Basic dashboard"),
dashboardSidebar(sidebarMenu(
menuItem(tabName = "home", text = "Home", icon = icon("home")),
menuItem(tabName = "another", text = "Another Tab", icon = icon("heart"))
)),
dashboardBody(
fluidRow(
box(plotOutput("plot1", height = 250)),
box(
title = "Controls",
sliderInput("slider", "Number of observations:", 1, 100, 50)
)
)
)
)
server <- function(input, output) {
set.seed(122)
histdata <- rnorm(500)
output$plot1 <- renderPlot({
data <- histdata[seq_len(input$slider)]
hist(data)
})
}
shinyApp(ui, server)
runApp()
runApp()
runApp()
library(shiny)
library(semantic.dashboard)
library(ggplot2)
library(plotly)
library(DT)
ui <- dashboardPage(
dashboardHeader(color = "blue",title = "Dashboard Demo", inverted = TRUE),
dashboardSidebar(
size = "thin", color = "teal",
sidebarMenu(
menuItem(tabName = "main", "Main", icon = icon("car")),
menuItem(tabName = "extra", "Extra", icon = icon("table"))
)
),
dashboardBody(
tabItems(
selected = 1,
tabItem(
tabName = "main",
fluidRow(
box(width = 8,
title = "Graph 1",
color = "green", ribbon = TRUE, title_side = "top right",
column(width = 8,
plotOutput("boxplot1")
)
),
box(width = 8,
title = "Graph 2",
color = "red", ribbon = TRUE, title_side = "top right",
column(width = 8,
plotlyOutput("dotplot1")
)
)
)
),
tabItem(
tabName = "extra",
fluidRow(
dataTableOutput("carstable")
)
)
)
), theme = "cerulean"
)
server <- shinyServer(function(input, output, session) {
data("mtcars")
colscale <- c(semantic_palette[["red"]], semantic_palette[["green"]], semantic_palette[["blue"]])
mtcars$am <- factor(mtcars$am,levels=c(0,1),
labels=c("Automatic","Manual"))
output$boxplot1 <- renderPlot({
ggplot(mtcars, aes(x = am, y = mpg)) +
geom_boxplot(fill = semantic_palette[["green"]]) +
xlab("gearbox") + ylab("Miles per gallon")
})
output$dotplot1 <- renderPlotly({
ggplotly(ggplot(mtcars, aes(wt, mpg))
+ geom_point(aes(colour=factor(cyl), size = qsec))
+ scale_colour_manual(values = colscale)
)
})
output$carstable <- renderDataTable(mtcars)
})
shinyApp(ui, server)
runApp()
shiny::runApp()
?box
# Dashboard
library(shiny)
library(shinydashboard)
library(shinydashboardPlus)
library(shinyWidgets)
library(shinythemes)
# Gráfico
library(plotly)
# Manipulação de dados
library(tidyverse)
library(DT)
# Importação de dados
library(readr)
Dados = read_csv("Dados.csv")
DadosUnicos = Dados %>% distinct(idVaga, Cidade, .keep_all = T)
Requisitos = names(DadosUnicos)[14:39] %>% str_replace_all("_", " ")
DadosUnicos %>% filter("R" == TRUE) %>% View()
DadosUnicos %>% filter(R == TRUE) %>% View()
apply(DadosUnicos[DadosUnicos$R == TRUE, 14:40], 2, function(x){sum(x, na.rm = T)})
apply(DadosUnicos[DadosUnicos$R == TRUE, 14:40], 2, function(x){sum(x, na.rm = T)}) %>% sort()
apply(DadosUnicos[DadosUnicos$R == TRUE, 14:40], 2, function(x){sum(x, na.rm = T)}) %>% sort(decreasing = T)
apply(DadosUnicos[DadosUnicos$R == TRUE, 14:40], 2, function(x){sum(x, na.rm = T)}) %>% sort(decreasing = T) %>% head()
install.packages("highcharter")
library("shiny")
library("highcharter")
data(citytemp)
ui <- fluidPage(
h1("Highcharter Demo"),
fluidRow(
column(width = 4, class = "panel",
selectInput("type", label = "Type", width = "100%",
choices = c("line", "column", "bar", "spline")),
selectInput("stacked", label = "Stacked",  width = "100%",
choices = c(FALSE, "normal", "percent")),
selectInput("theme", label = "Theme",  width = "100%",
choices = c(FALSE, "fivethirtyeight", "economist",
"darkunica", "gridlight", "sandsignika",
"null", "handdrwran", "chalk")
)
),
column(width = 8,
highchartOutput("hcontainer",height = "500px")
)
)
)
server = function(input, output) {
output$hcontainer <- renderHighchart({
hc <- hc_demo() %>%
hc_rm_series("Berlin") %>%
hc_chart(type = input$type)
if (input$stacked != FALSE) {
hc <- hc %>%
hc_plotOptions(series = list(stacking = input$stacked))
}
if (input$theme != FALSE) {
theme <- switch(input$theme,
null = hc_theme_null(),
darkunica = hc_theme_darkunica(),
gridlight = hc_theme_gridlight(),
sandsignika = hc_theme_sandsignika(),
fivethirtyeight = hc_theme_538(),
economist = hc_theme_economist(),
chalk = hc_theme_chalk(),
handdrwran = hc_theme_handdrawn()
)
hc <- hc %>% hc_add_theme(theme)
}
hc
})
}
shinyApp(ui = ui, server = server)
install.packages("curl")
library("shiny")
library("highcharter")
data(citytemp)
ui <- fluidPage(
h1("Highcharter Demo"),
fluidRow(
column(width = 4, class = "panel",
selectInput("type", label = "Type", width = "100%",
choices = c("line", "column", "bar", "spline")),
selectInput("stacked", label = "Stacked",  width = "100%",
choices = c(FALSE, "normal", "percent")),
selectInput("theme", label = "Theme",  width = "100%",
choices = c(FALSE, "fivethirtyeight", "economist",
"darkunica", "gridlight", "sandsignika",
"null", "handdrwran", "chalk")
)
),
column(width = 8,
highchartOutput("hcontainer",height = "500px")
)
)
)
server = function(input, output) {
output$hcontainer <- renderHighchart({
hc <- hc_demo() %>%
hc_rm_series("Berlin") %>%
hc_chart(type = input$type)
if (input$stacked != FALSE) {
hc <- hc %>%
hc_plotOptions(series = list(stacking = input$stacked))
}
if (input$theme != FALSE) {
theme <- switch(input$theme,
null = hc_theme_null(),
darkunica = hc_theme_darkunica(),
gridlight = hc_theme_gridlight(),
sandsignika = hc_theme_sandsignika(),
fivethirtyeight = hc_theme_538(),
economist = hc_theme_economist(),
chalk = hc_theme_chalk(),
handdrwran = hc_theme_handdrawn()
)
hc <- hc %>% hc_add_theme(theme)
}
hc
})
}
shinyApp(ui = ui, server = server)
search()
highcharts_demo()
install.packages("igraph")
install.packages("igraph")
# create a dataset:
data <- data_frame(
from=c("A", "A", "B", "D", "C", "D", "E", "B", "C", "D", "K", "A", "M"),
to=c("B", "E", "F", "A", "C", "A", "B", "Z", "A", "C", "A", "B", "K")
)
install.packages("networkD3")
install.packages("networkD3")
library(igraph)
library(networkD3)
install.packages("igraph")
library(igraph)
install.packages("igraph")
library(igraph)
# create a dataset:
data <- data_frame(
from=c("A", "A", "B", "D", "C", "D", "E", "B", "C", "D", "K", "A", "M"),
to=c("B", "E", "F", "A", "C", "A", "B", "Z", "A", "C", "A", "B", "K")
)
library(tidyverse)
# create a dataset:
data <- data_frame(
from=c("A", "A", "B", "D", "C", "D", "E", "B", "C", "D", "K", "A", "M"),
to=c("B", "E", "F", "A", "C", "A", "B", "Z", "A", "C", "A", "B", "K")
)
# create a dataset:
data <- data.frame(
from=c("A", "A", "B", "D", "C", "D", "E", "B", "C", "D", "K", "A", "M"),
to=c("B", "E", "F", "A", "C", "A", "B", "Z", "A", "C", "A", "B", "K")
)
# Plot
p <- simpleNetwork(data, height="100px", width="100px")
library(networkD3)
search()
# Plot
p <- simpleNetwork(data, height="100px", width="100px")
p
p
?simpleNetwork
p
p <- simpleNetwork(data, height="100px", width="100px",
Source = 1,                 # column number of source
Target = 2,                 # column number of target
linkDistance = 10,          # distance between node. Increase this value to have more space between nodes
charge = -900,                # numeric value indicating either the strength of the node repulsion (negative value) or attraction (positive value)
fontSize = 14,               # size of the node names
fontFamily = "serif",       # font og node names
linkColour = "#666",        # colour of edges, MUST be a common colour for the whole graph
nodeColour = "#69b3a2",     # colour of nodes, MUST be a common colour for the whole graph
opacity = 0.9,              # opacity of nodes. 0=transparent. 1=no transparency
zoom = T                    # Can you zoom on the figure?
)
p
hc <- hclust(dist(USArrests), "ave")
radialNetwork(as.radialNetwork(hc))
hairColourData <- matrix(c(11975, 1951, 8010, 1013,
5871, 10048, 16145, 990,
8916, 2060, 8090, 940,
2868, 6171, 8045, 6907),
nrow = 4)
chordNetwork(Data = hairColourData,
width = 500,
height = 500,
colourScale = c("#000000",
"#FFDD89",
"#957244",
"#F26223"),
labels = c("red", "brown", "blond", "gray"))
hc <- hclust(dist(USArrests), "ave")
dendroNetwork(hc, height = 600)
dendroNetwork(hc, treeOrientation = "vertical")
dendroNetwork(hc, height = 600, linkType = "diagonal")
dendroNetwork(hc, treeOrientation = "vertical", linkType = "diagonal")
dendroNetwork(hc, textColour = c("red", "green", "orange")[cutree(hc, 3)],height = 600)
dendroNetwork(hc, textColour = c("red", "green", "orange")[cutree(hc, 3)],
treeOrientation = "vertical")
URL <- paste0("https://cdn.rawgit.com/christophergandrud/networkD3/",
"master/JSONdata//flare.json")
## Convert to list format
Flare <- jsonlite::fromJSON(URL, simplifyDataFrame = FALSE)
## Recreate Bostock example from http://bl.ocks.org/mbostock/4063550
diagonalNetwork(List = Flare, fontSize = 10, opacity = 0.9)
#### Create a tree dendrogram from an R hclust object
hc <- hclust(dist(USArrests), "ave")
diagonalNetwork(as.radialNetwork(hc))
diagonalNetwork(as.radialNetwork(hc), fontFamily = "cursive")
#### Create tree from a hierarchical R list
For an alternative structure see: http://stackoverflow.com/a/30747323/1705044
CanadaPC <- list(name = "Canada", children = list(list(name = "Newfoundland",
children = list(list(name = "St. John's"))),
list(name = "PEI",
children = list(list(name = "Charlottetown"))),
list(name = "Nova Scotia",
children = list(list(name = "Halifax"))),
list(name = "New Brunswick",
children = list(list(name = "Fredericton"))),
list(name = "Quebec",
children = list(list(name = "Montreal"),
list(name = "Quebec City"))),
list(name = "Ontario",
children = list(list(name = "Toronto"),
list(name = "Ottawa"))),
list(name = "Manitoba",
children = list(list(name = "Winnipeg"))),
list(name = "Saskatchewan",
children = list(list(name = "Regina"))),
list(name = "Nunavuet",
children = list(list(name = "Iqaluit"))),
list(name = "NWT",
children = list(list(name = "Yellowknife"))),
list(name = "Alberta",
children = list(list(name = "Edmonton"))),
list(name = "British Columbia",children = list(list(name = "Victoria"),
list(name = "Vancouver"))),
list(name = "Yukon",
children = list(list(name = "Whitehorse")))
))
diagonalNetwork(List = CanadaPC, fontSize = 10)
data(MisLinks)
data(MisNodes)
# Create graph
forceNetwork(Links = MisLinks, Nodes = MisNodes, Source = "source",
Target = "target", Value = "value", NodeID = "name",
Group = "group", opacity = 0.4, zoom = TRUE)
# Create graph with legend and varying node radius
forceNetwork(Links = MisLinks, Nodes = MisNodes, Source = "source",
Target = "target", Value = "value", NodeID = "name",
Nodesize = "size",
radiusCalculation = "Math.sqrt(d.nodesize)+6",
Group = "group", opacity = 0.4, legend = TRUE)
# Create graph directed arrows
forceNetwork(Links = MisLinks, Nodes = MisNodes, Source = "source",
Target = "target", Value = "value", NodeID = "name",
Group = "group", opacity = 0.4, arrows = TRUE)
## Not run:
#### JSON Data Example
# Load data JSON formated data into two R data frames
# Create URL. paste0 used purely to keep within line width.
URL <- paste0("https://cdn.rawgit.com/christophergandrud/networkD3/",
"master/JSONdata/miserables.json")
MisJson <- jsonlite::fromJSON(URL)
# Create graph
forceNetwork(Links = MisJson$links, Nodes = MisJson$nodes, Source = "source",
Target = "target", Value = "value", NodeID = "name",
Group = "group", opacity = 0.4)
# Create graph with zooming
forceNetwork(Links = MisJson$links, Nodes = MisJson$nodes, Source = "source",
Target = "target", Value = "value", NodeID = "name",
Group = "group", opacity = 0.4, zoom = TRUE)
# Create a bounded graph
forceNetwork(Links = MisJson$links, Nodes = MisJson$nodes, Source = "source",
Target = "target", Value = "value", NodeID = "name",
Group = "group", opacity = 0.4, bounded = TRUE)
# Create graph with node text faintly visible when no hovering
forceNetwork(Links = MisJson$links, Nodes = MisJson$nodes, Source = "source",
Target = "target", Value = "value", NodeID = "name",
Group = "group", opacity = 0.4, bounded = TRUE,
opacityNoHover = TRUE)which(MisNodes == "Valjean", arr = TRUE)[1] - 1
ValjeanInds = which(MisLinks == 11, arr = TRUE)[, 1]
# Create a colour vector
ValjeanCols = ifelse(1:nrow(MisLinks) %in% ValjeanInds, "#bf3eff", "#666")
forceNetwork(Links = MisLinks, Nodes = MisNodes, Source = "source",
Target = "target", Value = "value", NodeID = "name",
Group = "group", opacity = 0.8, linkColour = ValjeanCols)
## Create graph with alert pop-up when a node is clicked. You're
# unlikely to want to do exactly this, but you might use
# Shiny.onInputChange() to allocate d.XXX to an element of input
# for use in a Shiny app.
MyClickScript <- 'alert("You clicked " + d.name + " which is in row " +
(d.index + 1) + " of your original R data frame");'
forceNetwork(Links = MisLinks, Nodes = MisNodes, Source = "source",
Target = "target", Value = "value", NodeID = "name",
Group = "group", opacity = 1, zoom = FALSE,
bounded = TRUE, clickAction = MyClickScript)
URL <- paste0("https://cdn.rawgit.com/christophergandrud/networkD3/",
"master/JSONdata//flare.json")
## Convert to list format
Flare <- jsonlite::fromJSON(URL, simplifyDataFrame = FALSE)
## Recreate Bostock example from http://bl.ocks.org/mbostock/4063550
radialNetwork(List = Flare, fontSize = 10, opacity = 0.9)
#### Create a tree dendrogram from an R hclust object
hc <- hclust(dist(USArrests), "ave")
radialNetwork(as.radialNetwork(hc))
radialNetwork(as.radialNetwork(hc), fontFamily = "cursive")
URL <- paste0('https://cdn.rawgit.com/christophergandrud/networkD3/',
'master/JSONdata/energy.json')
energy <- jsonlite::fromJSON(URL)
saveNetwork 19
# Plot
sankeyNetwork(Links = energy$links, Nodes = energy$nodes, Source = 'source',
Target = 'target', Value = 'value', NodeID = 'name',
units = 'TWh', fontSize = 12, nodeWidth = 30)
# Colour links
energy$links$energy_type <- sub(' .*', '',
energy$nodes[energy$links$source + 1, 'name'])
sankeyNetwork(Links = energy$links, Nodes = energy$nodes, Source = 'source',
Target = 'target', Value = 'value', NodeID = 'na
DadosR = DadosUnicos %>% filter(R == T)
apply(DadosR[,14:39],2,function(x){sum(x, na.rm = T)})
,
DadosR = DadosUnicos %>% filter(R == TRUE)
Dados = read_csv("Dados.csv")
DadosUnicos = Dados %>% distinct(idVaga, Cidade, .keep_all = T)
Requisitos = names(DadosUnicos)[14:39] %>% str_replace_all("_", " ")
DadosR = DadosUnicos %>% filter(R == TRUE)
apply(DadosR[,14:39],2,function(x){sum(x, na.rm = T)})
requi = apply(DadosR[,14:39],2,function(x){sum(x, na.rm = T)})
apply(DadosR[,14:39],2,function(x){sum(x, na.rm = T)}) %>% as.data.frame()
apply(DadosR[,14:39],2,function(x){sum(x, na.rm = T)}) %>% as_data_frame()
library(reshape2)
melt(apply(DadosR[,14:39],2,function(x){sum(x, na.rm = T)}))
spread(apply(DadosR[,14:39],2,function(x){sum(x, na.rm = T)}))
spread(apply(DadosR[,14:39],2,function(x){sum(x, na.rm = T)}), value)
sapply(DadosR[,14:39],function(x){sum(x, na.rm = T)})
sapply(DadosR[,14:39],function(x){sum(x, na.rm = T)}) %>% melt()
sapply(DadosR[,14:39],function(x){sum(x, na.rm = T)}) %>% melt() %>% names()
sapply(DadosR[,14:39],function(x){sum(x, na.rm = T)}) %>% melt() %>% row.names()
sapply(DadosR[,14:39],function(x){sum(x, na.rm = T)}) %>% melt() %>% mutate(Requi = row.names())
requi %<>% mutate(Requi = names(requi))
requi = sapply(DadosR[,14:39],function(x){sum(x, na.rm = T)}) %>% as.data.frame()
requi %<>% mutate(Requi = names(requi))
library(magrittr)
requi %<>% mutate(Requi = names(requi))
requi %>% head()
requi = sapply(DadosR[,14:39],function(x){sum(x, na.rm = T)}) %>% as.data.frame()
requi
requi %<>% mutate(Requi = row.names(requi))
requi %>% head()
requi = sapply(DadosR[,14:39],function(x){sum(x, na.rm = T)}) %>% melt()
requi %<>% mutate(Requi = row.names(requi))
requi = sapply(DadosR[,14:39],function(x){sum(x, na.rm = T)}) %>% reshape2::melt()
requi %<>% mutate(Requi = row.names(requi))
requi %>% head()
data = data.frame(
from = "R",
to = requi$Requi
)
simpleNetwork(data, height="100px", width="100px", fontSize = requi$value)
install.packages("chorddiag")
devtools::install_github("mattflor/chorddiag")
devtools::install_github("mattflor/chorddiag")
